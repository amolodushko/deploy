{"version":3,"sources":["components/logo/index.js","components/header/index.js","components/loginbutton/index.js","components/nemid/index.js","components/form/index.js","App.js","serviceWorker.js","index.js"],"names":["Index","react_default","a","createElement","className","Component","onClick","this","props","onBackClicked","lib_default","size","name","logo","_this$props","disabled","onButtonClick","concat","href","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this$state","state","password","isValid","handleLogin","onFieldChange","e","_e$target","target","value","newStateValue","setState","_this$state2","onChange","placeholder","loginbutton","nemid","trim","App","console","log","login","Fragment","header","components_form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50ebae36.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './css/index.css';\r\n\r\nclass Index extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"bet25-logo\"></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;\r\n","import React, {Component} from 'react';\r\nimport './css/index.css';\r\nimport FontAwesome from 'react-fontawesome';\r\nimport Bet25Logo from '../logo';\r\n\r\nclass Index extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"login-header\">\r\n                <button className=\"back-button\" onClick={this.props.onBackClicked}>\r\n                    <FontAwesome className='back-arrow' size='2x' name='chevron-left'/>\r\n                </button>\r\n                <div className=\"logo-wrapper\">\r\n                    <Bet25Logo/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;\r\n","import React, {Component} from 'react';\r\nimport './css/index.css';\r\n\r\nclass Index extends Component {\r\n    render() {\r\n        const {disabled, onButtonClick} = this.props,\r\n            disabledCls = disabled ? 'disabled' : '',\r\n            className = `login-button ${disabledCls}`;\r\n\r\n        return (\r\n            <button onClick={onButtonClick} className={className}>Log Ind</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;\r\n","import React, { Component } from 'react';\r\nimport './css/index.css';\r\n\r\nclass Index extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"bet25-login-nem flex\">\r\n                <a href=\"#\" className=\"log-ind-med-link\">Log ind med</a>\r\n                <div className=\"nem_id_logo\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;\r\n","import React, {Component} from 'react';\r\nimport './css/index.css';\r\nimport LoginButton from '../loginbutton';\r\nimport NemIdLogin from '../nemid';\r\n\r\nclass Index extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {name, password} = this.state;\r\n\r\n        return (\r\n            <div className=\"login-form-wrapper\">\r\n              <div className=\"form-fields-wrapper\">\r\n                  <div className=\"form-fields\">\r\n                      <input onChange={this.onFieldChange} placeholder=\"Brugernavn\" className=\"user-name login-field\"\r\n                             name=\"name\" value={name}/>\r\n                      <input onChange={this.onFieldChange} placeholder=\"Kodeord\" className=\"password login-field\"\r\n                             name=\"password\" value={password}/>\r\n                      <a href=\"#\" className=\"forgot-password\">Glemt kodeord?</a>\r\n                  </div>\r\n              </div>\r\n\r\n                <div className=\"login-actions-wrapper\">\r\n                    <LoginButton onButtonClick={this.onButtonClick} disabled={!this.isValid(name, password)}/>\r\n                    <NemIdLogin/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    isValid(name, value) {\r\n        return name.trim() !== '' && value.trim() !== '';\r\n    }\r\n\r\n    onButtonClick = () => {\r\n        const {name, password} = this.state;\r\n        if (!this.isValid(name, password)) {\r\n            return;\r\n        }\r\n\r\n        this.props.handleLogin(name, password);\r\n    }\r\n\r\n    onFieldChange = (e) => {\r\n        let {name, value} = e.target,\r\n            newStateValue = {};\r\n\r\n        newStateValue[name] = value;\r\n\r\n        this.setState(newStateValue);\r\n    }\r\n}\r\n\r\nexport default Index;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Header from './components/header';\r\nimport Form from './components/form';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-main-cover\"></div>\r\n                <div className=\"login-page-body\">\r\n                    <Header onBackClicked={this.onBackClicked}/>\r\n                    <Form handleLogin={this.login}/>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    onBackClicked = () => {\r\n        console.log('Go Back!');\r\n    }\r\n\r\n    login = (name, password) => {\r\n        console.log('do login for', name, password);\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('login-page'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}